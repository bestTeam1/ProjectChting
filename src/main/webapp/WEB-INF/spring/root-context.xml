<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util https://www.springframework.org/schema/util/spring-util.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- properties 파일을 가져오기 위한 Configurer -->
	<bean id="propertyPlaceholderConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:properties/Driver.properties</value>
				<value>classpath:properties/Email.properties</value>
			</list>
		</property>
	</bean>
	<tx:annotation-driven />
	<!-- DB 드라이버 -->
	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${Driver.driverClassName}" />
		<property name="url" value="${Driver.url}" />
		<property name="username" value="${Driver.username}" />
		<property name="password" value="${Driver.password}" />

		<!-- 커넥션 풀에서 커넥션을 가져올때 해당 커넥션의 유효성 검증에 사용할 SQL Query (반드시 하나 이상의 row 가
			반환될 SELECT 구분이어야 함.) -->
		<property name="validationQuery" value="SELECT 1" />

		<!-- 커넥션 사용이 많아져서 커넥션 풀이 비었을때 사용할수 있는 커넥션을 반환받기까지 기다릴수 있는 최대시간 (ms) (기본값:
			-1, 무한대기) -->
		<property name="maxWaitMillis" value="600" />
		<property name="initialSize" value="10" />
		<property name="maxOpenPreparedStatements" value="20" />
		<!-- 커넥션 풀에서 유지될수 있는 idle 상태 커넥션의 최대 개수. (기본값 : 8) -->
		<property name="maxIdle" value="20" />
		<!-- 커넥션 풀에 유지되수 있는 idle 상태 커넥션의 최소 개수. (기본값 : 0) -->
		<property name="minIdle" value="5" />

		<!--<property name="validationInterval" value="30"/> -->
		<!-- 커넥션 유효성 검사를 풀에 idle 상태에 존재할때 실시할것인지 여부 (기본값 : false, 반드시 validationQuery
			가 설정되어 있어야 함.) -->
		<property name="testWhileIdle" value="true" />

		<property name="testOnBorrow" value="true" />

		<!-- 설정된 시간 간격마다 놀고 있는 커넥션을 풀에서 제거하는 evictor thread 가 실행된다. minIdle 로 커넥션을
			유지한다. -->
		<property name="timeBetweenEvictionRunsMillis" value="300000" />
		<!-- thread 동작시 한번에 검사할 커넥션의 수(기본 3) : 전체커넥션 검사에 소요되는 시간 = timeBetweenEvictionRunsMillis
			x numTestsPerEvictionRun -->
		<property name="numTestsPerEvictionRun" value="5" />
		<!-- minEvictableIdleTimeMillis 값(기본30분)은 Mysql에 설정된 wait_timeout 또는 방화벽에
			설정된 session timeout 값보다 작아야 한다 -->
		<property name="minEvictableIdleTimeMillis" value="14400000" />
		<!-- removeAbandoned : connection 을 사용한 후 removeAbandonedTimeout(초,기본값
			60)반환되지 않으면 connection pool 에서 제거하고 close 한다 -->
		<!--<property name="removeAbandoned" value="true"/> -->
		<property name="removeAbandonedTimeout" value="600" />
	</bean>

	<!-- JNDI SETTING -->
	<bean id="vendorProperties"
		class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="properties">
			<props>
				<prop key="SQL Server">sqlserver</prop>
				<prop key="DB2">db2</prop>
				<prop key="Oracle">oracle</prop>
				<prop key="MySQL">mysql</prop>
			</props>
		</property>
	</bean>

	<!-- DB 트랜잭션 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="databaseIdProvider"
		class="org.apache.ibatis.mapping.VendorDatabaseIdProvider">
		<property name="properties" ref="vendorProperties" />
	</bean>

	<!-- Mybatis 관련 설정 -->
	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="typeAliasesPackage"
			value="com.team1.chting.domain" />
		<property name="databaseIdProvider" ref="databaseIdProvider" />
		<property name="configLocation"
			value="/WEB-INF/config/mybatis/mybatis-config.xml" />
		<property name="mapperLocations"
			value="classpath*:com/team1/chting/mapper/*xml" />
	</bean>
	<bean id="sqlSessionTemplate"
		class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactory" />
	</bean>

	<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- 뷰 결정자 -->
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass">
			<value>org.springframework.web.servlet.view.JstlView</value>
		</property>
		<property name="prefix">
			<value>/WEB-INF/views/</value>
		</property>
		<property name="suffix">
			<value>.jsp</value>
		</property>
		<property name="order">
			<value>2</value>
		</property>
	</bean>

	<bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
		<property name="order" value="1" />
	</bean>

	<!-- JSON 데이터 VIEW -->
	<bean id="jsonView" name="jsonView"
		class="net.sf.json.spring.web.servlet.view.JsonView">
		<property name="contentType"
			value="application/json;charset=UTF-8" />
	</bean>

	<!-- 메시지소스 -->
	<bean id="messageSourceAccessor"
		class="org.springframework.context.support.MessageSourceAccessor">
		<constructor-arg ref="messageSource" />
	</bean>

	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<!--<value>/WEB-INF/messages/address</value> -->
			</list>
		</property>
		<property name="cacheSeconds" value="60" />
	</bean>

	<!-- 예외처리 관련 설정 -->
	<bean id="exceptionHandler"
		class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<value></value>
		</property>
	</bean>

	<!-- 공통 파일 업로드 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="10485760"></property>
		<property name="defaultEncoding" value="UTF-8"></property>
	</bean>

	<!-- 비밀번호 암호화 -->
	<bean id="bCryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
		<!-- <constructor-arg name="strength" value="20"></constructor-arg> -->
	</bean>

	<!-- 메일 전송 Bean -->
	<bean id="mailSender"
		  class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="smtp.gmail.com" />
		<property name="port" value="587" />
		<property name="username" value="${Email.email}" />
		<property name="password" value="${Email.password}" />
		<property name="javaMailProperties">
			<props>
				<prop key="mail.transport.protocol">smtp</prop>
				<prop key="mail.smtp.auth">true</prop>
				<prop key="mail.smtp.starttls.enable">true</prop>
				<prop key="mail.debug">true</prop>
			</props>
		</property>
	</bean>

	<!-- velocityEngine -->
	<bean id="velocityEngine"
		  class="org.springframework.ui.velocity.VelocityEngineFactoryBean">
		<property name="velocityProperties">
			<value>
				resource.loader=class
				class.resource.loader.class=org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader
			</value>
		</property>
	</bean>

</beans>
